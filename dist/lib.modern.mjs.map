{"version":3,"file":"lib.modern.mjs","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { ethers, Signer, sha256, toUtf8Bytes } from 'ethers'\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Create a hash\n  const hash = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the hash\n  const signedHash = await signer.signMessage(ethers.getBytes(hash))\n\n  return signedHash\n}\n","import { Signer } from 'ethers'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs,\n  File\n} from './@types'\nimport { getSignedHash } from './utils'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, signer?: Signer) {\n    this.baseURL = baseURL\n    this.signer = signer\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, args)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {File[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, files: File[]): Promise<any> {\n    try {\n      const nonce = Date.now()\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n      const formData = new FormData()\n      files.forEach((file, index) => {\n        formData.append(`file${index}`, file)\n      })\n\n      const response = await axios.post(`${this.baseURL}/upload`, formData, {\n        params: { quoteId, nonce, signature },\n        headers: { 'Content-Type': 'multipart/form-data' }\n      })\n      return response\n    } catch (error) {\n      return error\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n    const quote = await this.getQuote(args)\n    const uploadResponse = await this.upload(quote.quoteId, args.files)\n    return uploadResponse\n  }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Date.now()\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n"],"names":["getSignedHash","async","signer","quoteId","nonce","hash","sha256","toUtf8Bytes","toString","signMessage","ethers","getBytes","signedHash","DBSClient","constructor","baseURL","this","axios","get","data","args","post","files","Date","now","signature","formData","FormData","forEach","file","index","append","params","headers","error","quote","getQuote","upload"],"mappings":"2GAQa,MAAAA,EAAgBC,MAAOC,EAAgBC,EAAiBC,KAEnE,MAAMC,EAAOC,EAAOC,EAAYJ,EAAUC,EAAMI,aAKhD,aAFyBN,EAAOO,YAAYC,EAAOC,SAASN,GAErDO,ECEI,MAAAC,EASXC,YAAYC,EAAiBb,GAAec,KARpCD,aACAb,EAAAA,KAAAA,cAQNc,KAAKD,QAAUA,EACfC,KAAKd,OAASA,CAChB,CAOAD,uBAEE,aADuBgB,EAAMC,IAAmB,GAAGF,KAAKD,aACxCI,IAClB,CAQAlB,eAAemB,GAEb,aADuBH,EAAMI,KAAwB,GAAAL,KAAKD,mBAAoBK,IAC9DD,IAClB,CASAlB,aAAaE,EAAiBmB,GAC5B,IACE,MAAMlB,EAAQmB,KAAKC,MACbC,QAAkBzB,EAAcgB,KAAKd,OAAQC,EAASC,GACtDsB,EAAW,IAAIC,EASrB,OARAL,EAAMM,QAAQ,CAACC,EAAMC,KACnBJ,EAASK,OAAO,OAAOD,IAASD,EAClC,SAEuBZ,EAAMI,KAAQ,GAAAL,KAAKD,iBAAkBW,EAAU,CACpEM,OAAQ,CAAE7B,UAASC,QAAOqB,aAC1BQ,QAAS,CAAE,eAAgB,wBAG9B,CAAC,MAAOC,GACP,OAAOA,CACR,CACH,CAOAjC,wBAAwBmB,GACtB,MAAMe,aAAmBC,SAAShB,GAElC,aAD6BJ,KAAKqB,OAAOF,EAAMhC,QAASiB,EAAKE,MAE/D,CAQArB,gBAAgBE,GAId,aAHuBc,EAAMI,KAAsB,GAAGL,KAAKD,oBAAqB,CAC9EZ,aAEcgB,IAClB,CASAlB,cAAcE,GACZ,MAAMC,EAAQmB,KAAKC,MACbC,QAAkBzB,EAAcgB,KAAKd,OAAQC,EAASC,GAI5D,aAHuBa,EAAMI,KAAyB,GAAAL,KAAKD,kBAAmB,KAAM,CAClFiB,OAAQ,CAAE7B,UAASC,QAAOqB,gBAEZN,IAClB,CAQAlB,2BAA2BmB,SACnBH,EAAMI,KAAQ,GAAAL,KAAKD,mBAAoBK,EAC/C"}