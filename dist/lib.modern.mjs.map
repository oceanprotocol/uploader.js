{"version":3,"file":"lib.modern.mjs","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { Signer, sha256, toUtf8Bytes } from 'ethers'\n\nexport const minErc20Abi = [\n  'function approve(address, uint256) external returns (bool)',\n  'function balanceOf(address owner) external view returns (uint256)'\n]\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Concatenate the message\n  const message = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the original message directly\n  const signature = await signer.signMessage(message)\n\n  return signature\n}\n","import { Signer, MaxInt256, Contract } from 'ethers'\nimport axios, { AxiosResponse } from 'axios'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs,\n  DBSGetQuoteArgs,\n  FileData\n} from './@types'\nimport { getSignedHash, minErc20Abi } from './utils'\nimport validator from 'validator'\nimport fs from 'fs'\nimport FormData from 'form-data'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n  private dbsAddress: string\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, address: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n    this.dbsAddress = address\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    // Including { require_tld: false } to allow 'localhost' as a valid URL.\n    if (!validator.isURL(baseURL, { require_tld: false })) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  private getFileSizes(files: string[]): FileData[] {\n    return files.map((file) => {\n      const stats = fs.statSync(file)\n      return {\n        length: stats.size\n      }\n    })\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    if (!args.filePath && !args.fileInfo) {\n      throw new Error('Either filePath or fileInfo must be provided.')\n    }\n    const fileSizes: FileData[] = args.fileInfo || this.getFileSizes(args.filePath)\n\n    const payload: DBSGetQuoteArgs = {\n      type: args.type,\n      files: fileSizes,\n      duration: args.duration,\n      payment: args.payment,\n      userAddress: args.userAddress\n    }\n\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, payload)\n\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {Buffer[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, tokenAddress: string, filePaths: string[]): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n\n      const token = new Contract(tokenAddress, minErc20Abi, this.signer)\n\n      await (await token.approve(this.dbsAddress, MaxInt256)).wait()\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n\n      const formData = new FormData()\n      // Add each file to the form data\n      filePaths.forEach((path, index) => {\n        formData.append(`file${index + 1}`, fs.createReadStream(path))\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n\n      const response = await axios.post(uploadUrl, formData, {\n        headers: {\n          ...formData.getHeaders()\n        }\n      })\n\n      return response\n    } catch (error) {\n      console.error('Error:', error)\n      return error.data\n    }\n  }\n\n  async uploadBrowser(\n    quoteId: string,\n    tokenAddress: string,\n    files: FileList\n  ): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n\n      const token = new Contract(tokenAddress, minErc20Abi, this.signer)\n\n      await token.approve(this.dbsAddress, MaxInt256)\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n\n      const formData = new FormData()\n      // Add each file to the form data\n      Array.from(files).forEach((file, index) => {\n        formData.append(`file${index + 1}`, file, file.name)\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n\n      const response = await axios.post(uploadUrl, formData)\n\n      return response\n    } catch (error) {\n      console.error('Error:', error)\n      return error.data\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  // async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n  //   const quote = await this.getQuote(args)\n  //   const uploadResponse = await this.upload(quote.quoteId, args.files)\n  //   return uploadResponse\n  // }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.get<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      params: {\n        quoteId\n      }\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Math.round(Date.now() / 1000)\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.get<GetLinkResult[]>(`${this.baseURL}/getLink`, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<AxiosResponse> {\n    const response = await axios.post(`${this.baseURL}/register`, args)\n    return response\n  }\n\n  /**\n   * Retrieves the quote history for the given user address, nonce, and signature.\n   *\n   * @returns {Promise<any>} A promise that resolves to the quote history data.\n   */\n  async getHistory(): Promise<any> {\n    try {\n      const userAddress = await this.signer.getAddress()\n      const nonce = Math.round(Date.now() / 1000)\n      const signature = await getSignedHash(this.signer, '', nonce)\n\n      // Construct the URL with the query parameters\n      const url = `${this.baseURL}/getHistory?userAddress=${userAddress}&nonce=${nonce}&signature=${signature}`\n\n      // Send a GET request\n      const response = await axios.get(url)\n\n      // Validate the response status code\n      if (response.status !== 200) {\n        throw new Error('Failed to retrieve history.')\n      }\n\n      return response.data\n    } catch (error) {\n      console.error('An error occurred while fetching history:', error)\n      throw error\n    }\n  }\n}\n"],"names":["minErc20Abi","getSignedHash","async","signer","quoteId","nonce","message","sha256","toUtf8Bytes","toString","signMessage","signature","DBSClient","constructor","baseURL","address","dbsAddress","this","validateBaseURL","trim","Error","validator","isURL","require_tld","getFileSizes","files","map","file","length","fs","statSync","size","getStorageInfo","axios","get","data","getQuote","args","filePath","fileInfo","fileSizes","payload","type","duration","payment","userAddress","post","upload","tokenAddress","filePaths","Math","round","Date","now","token","Contract","approve","MaxInt256","wait","formData","FormData","forEach","path","index","append","createReadStream","uploadUrl","headers","_extends","getHeaders","error","console","uploadBrowser","Array","from","name","getStatus","params","getLink","registerMicroservice","getHistory","getAddress","url","response","status"],"mappings":"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"}