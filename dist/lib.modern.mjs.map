{"version":3,"file":"lib.modern.mjs","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { ethers, Signer, sha256, toUtf8Bytes } from 'ethers'\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Create a hash\n  const hash = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the hash\n  const signedHash = await signer.signMessage(ethers.getBytes(hash))\n\n  return signedHash\n}\n","import { Signer } from 'ethers'\nimport axios from 'axios'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs,\n  AcceptedPayment,\n  DBSGetQuoteArgs,\n  FileData\n} from './@types'\nimport { getSignedHash } from './utils'\nimport validator from 'validator'\nimport fs from 'fs'\nimport FormData from 'form-data'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    // Including { require_tld: false } to allow 'localhost' as a valid URL.\n    if (!validator.isURL(baseURL, { require_tld: false })) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  private getFileSizes(files: string[]): FileData[] {\n    return files.map((file) => {\n      const stats = fs.statSync(file)\n      return {\n        length: stats.size\n      }\n    })\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    if (!args.filePath && !args.fileInfo) {\n      throw new Error('Either filePath or fileInfo must be provided.')\n    }\n    const fileSizes: FileData[] = args.fileInfo || this.getFileSizes(args.filePath)\n\n    const payload: DBSGetQuoteArgs = {\n      type: args.type,\n      files: fileSizes,\n      duration: args.duration,\n      payment: args.payment,\n      userAddress: args.userAddress\n    }\n\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, payload)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {Buffer[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, filePaths: string[]): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n      const formData = new FormData()\n      // Add each file to the form data\n      filePaths.forEach((path, index) => {\n        formData.append(`file${index + 1}`, fs.createReadStream(path))\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n\n      const response = await axios.post(uploadUrl, formData, {\n        headers: {\n          ...formData.getHeaders()\n        }\n      })\n\n      return response.data\n    } catch (error) {\n      console.error('Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  // async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n  //   const quote = await this.getQuote(args)\n  //   const uploadResponse = await this.upload(quote.quoteId, args.files)\n  //   return uploadResponse\n  // }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Date.now()\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n"],"names":["getSignedHash","async","signer","quoteId","nonce","hash","sha256","toUtf8Bytes","toString","signMessage","ethers","getBytes","signedHash","DBSClient","constructor","baseURL","this","validateBaseURL","trim","Error","validator","isURL","require_tld","getFileSizes","files","map","file","length","fs","statSync","size","getStorageInfo","axios","get","data","getQuote","args","filePath","fileInfo","fileSizes","payload","type","duration","payment","userAddress","post","upload","filePaths","Math","round","Date","now","signature","formData","FormData","forEach","path","index","append","createReadStream","uploadUrl","headers","_extends","getHeaders","error","console","getStatus","getLink","params","registerMicroservice"],"mappings":"0XAQa,MAAAA,EAAgBC,MAAOC,EAAgBC,EAAiBC,KAEnE,MAAMC,EAAOC,EAAOC,EAAYJ,EAAUC,EAAMI,aAKhD,aAFyBN,EAAOO,YAAYC,EAAOC,SAASN,GAErDO,QCMIC,EASXC,WAAAA,CAAYC,EAAiBb,QARrBa,aAAO,EAAAC,KACPd,YAAM,EAQZc,KAAKC,gBAAgBF,GACrBC,KAAKD,QAAUA,EACfC,KAAKd,OAASA,CAChB,CAEQe,eAAAA,CAAgBF,GACtB,IAAKA,GAA8B,iBAAZA,GAA2C,KAAnBA,EAAQG,OACrD,MAAU,IAAAC,MAAM,mEAKlB,IAAKC,EAAUC,MAAMN,EAAS,CAAEO,aAAa,IAC3C,MAAM,IAAIH,MAAM,mCAEpB,CAEQI,YAAAA,CAAaC,GACnB,OAAOA,EAAMC,IAAKC,IAET,CACLC,OAFYC,EAAGC,SAASH,GAEVI,OAGpB,CAOA,oBAAMC,GAEJ,aADuBC,EAAMC,IAAmB,GAAGjB,KAAKD,aACxCmB,IAClB,CAQA,cAAMC,CAASC,GACb,IAAKA,EAAKC,WAAaD,EAAKE,SAC1B,MAAM,IAAInB,MAAM,iDAElB,MAAMoB,EAAwBH,EAAKE,UAAYtB,KAAKO,aAAaa,EAAKC,UAEhEG,EAA2B,CAC/BC,KAAML,EAAKK,KACXjB,MAAOe,EACPG,SAAUN,EAAKM,SACfC,QAASP,EAAKO,QACdC,YAAaR,EAAKQ,aAIpB,aADuBZ,EAAMa,KAAwB,GAAA7B,KAAKD,mBAAoByB,IAC9DN,IAClB,CASA,YAAMY,CAAO3C,EAAiB4C,GAC5B,IACE,MAAM3C,EAAQ4C,KAAKC,MAAMC,KAAKC,MAAQ,KAChCC,QAAkBpD,EAAcgB,KAAKd,OAAQC,EAASC,GACtDiD,EAAW,IAAIC,EAErBP,EAAUQ,QAAQ,CAACC,EAAMC,KACvBJ,EAASK,OAAc,OAAAD,EAAQ,IAAK7B,EAAG+B,iBAAiBH,GAAK,GAG/D,MAAMI,EAAe,GAAA5C,KAAKD,0BAA0BZ,WAAiBC,eAAmBgD,IAQxF,aANuBpB,EAAMa,KAAKe,EAAWP,EAAU,CACrDQ,QAAOC,EAAA,CAAA,EACFT,EAASU,iBAIA7B,IACjB,CAAC,MAAO8B,GAEP,MADAC,QAAQD,MAAM,SAAUA,GAClBA,CACP,CACH,CAmBA,eAAME,CAAU/D,GAId,aAHuB6B,EAAMa,KAAsB,GAAG7B,KAAKD,oBAAqB,CAC9EZ,aAEc+B,IAClB,CASA,aAAMiC,CAAQhE,GACZ,MAAMC,EAAQ8C,KAAKC,MACbC,QAAkBpD,EAAcgB,KAAKd,OAAQC,EAASC,GAI5D,aAHuB4B,EAAMa,KAAyB,GAAA7B,KAAKD,kBAAmB,KAAM,CAClFqD,OAAQ,CAAEjE,UAASC,QAAOgD,gBAEZlB,IAClB,CAQA,0BAAMmC,CAAqBjC,SACnBJ,EAAMa,KAAQ,GAAA7B,KAAKD,mBAAoBqB,EAC/C"}