{"version":3,"file":"lib.module.js","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { ethers, Signer, sha256, toUtf8Bytes } from 'ethers'\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Create a hash\n  const hash = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the hash\n  const signedHash = await signer.signMessage(ethers.getBytes(hash))\n\n  return signedHash\n}\n","import { Signer } from 'ethers'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs\n} from './@types'\nimport { getSignedHash } from './utils'\nimport validator from 'validator'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    // Including { require_tld: false } to allow 'localhost' as a valid URL.\n    if (!validator.isURL(baseURL, { require_tld: false })) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, args)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {Buffer[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, files: Buffer[]): Promise<any> {\n    try {\n      const nonce = Date.now()\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n      const formData = new FormData()\n      files.forEach((buffer, index) => {\n        formData.append(`file${index}`, buffer, { filename: `file${index}.bin` })\n      })\n\n      const response = await axios.post<any>(`${this.baseURL}/upload`, formData, {\n        params: { quoteId, nonce, signature },\n        headers: { ...formData.getHeaders(), 'Content-Type': 'multipart/form-data' }\n      })\n      return response\n    } catch (error) {\n      console.error('Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n    const quote = await this.getQuote(args)\n    const uploadResponse = await this.upload(quote.quoteId, args.files)\n    return uploadResponse\n  }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Date.now()\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n"],"names":["getSignedHash","signer","quoteId","nonce","hash","sha256","toUtf8Bytes","toString","Promise","resolve","signMessage","ethers","getBytes","e","reject","DBSClient","baseURL","this","validateBaseURL","_proto","prototype","trim","Error","validator","isURL","require_tld","getStorageInfo","axios","get","then","response","data","getQuote","args","post","upload","files","_this3","Date","now","signature","formData","FormData","forEach","buffer","index","append","filename","params","headers","_extends","getHeaders","_catch","error","console","getQuoteAndUpload","_this4","quote","getStatus","getLink","_this6","registerMicroservice"],"mappings":"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"}