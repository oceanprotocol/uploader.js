{"version":3,"file":"lib.module.js","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { ethers, Signer, sha256, toUtf8Bytes } from 'ethers'\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Create a hash\n  const hash = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the hash\n  const signedHash = await signer.signMessage(ethers.getBytes(hash))\n\n  return signedHash\n}\n","import { Signer } from 'ethers'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs\n} from './@types'\nimport { getSignedHash } from './utils'\nimport { ReadStream } from 'fs'\nimport validator from 'validator'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    if (!validator.isURL(baseURL)) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, args)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {ReadStream[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, files: ReadStream[]): Promise<any> {\n    try {\n      const nonce = Date.now()\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n      const formData = new FormData()\n      files.forEach((file, index) => {\n        formData.append(`file${index}`, file)\n      })\n\n      const response = await axios.post(`${this.baseURL}/upload`, formData, {\n        params: { quoteId, nonce, signature },\n        headers: { 'Content-Type': 'multipart/form-data' }\n      })\n      return response\n    } catch (error) {\n      return error\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n    const quote = await this.getQuote(args)\n    const uploadResponse = await this.upload(quote.quoteId, args.files)\n    return uploadResponse\n  }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Date.now()\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n"],"names":["getSignedHash","signer","quoteId","nonce","hash","sha256","toUtf8Bytes","toString","Promise","resolve","signMessage","ethers","getBytes","e","reject","DBSClient","baseURL","this","validateBaseURL","_proto","prototype","trim","Error","validator","isURL","getStorageInfo","axios","get","then","response","data","getQuote","args","post","upload","files","_this3","Date","now","signature","formData","FormData","forEach","file","index","append","params","headers","error","_catch","getQuoteAndUpload","_this4","quote","getStatus","getLink","_this6","registerMicroservice"],"mappings":"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"}