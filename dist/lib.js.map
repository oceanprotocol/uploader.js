{"version":3,"file":"lib.js","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { ethers, Signer, sha256, toUtf8Bytes } from 'ethers'\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Create a hash\n  const hash = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the hash\n  const signedHash = await signer.signMessage(ethers.getBytes(hash))\n\n  return signedHash\n}\n","import { Signer } from 'ethers'\nimport axios from 'axios'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs,\n  AcceptedPayment,\n  DBSGetQuoteArgs,\n  FileData\n} from './@types'\nimport { getSignedHash } from './utils'\nimport validator from 'validator'\nimport fs from 'fs'\nimport FormData from 'form-data'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    // Including { require_tld: false } to allow 'localhost' as a valid URL.\n    if (!validator.isURL(baseURL, { require_tld: false })) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  private getFileSizes(files: string[]): FileData[] {\n    return files.map((file) => {\n      const stats = fs.statSync(file)\n      return {\n        length: stats.size\n      }\n    })\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    if (!args.filePath && !args.fileInfo) {\n      throw new Error('Either filePath or fileInfo must be provided.')\n    }\n    const fileSizes: FileData[] = args.fileInfo || this.getFileSizes(args.filePath)\n\n    const payload: DBSGetQuoteArgs = {\n      type: args.type,\n      files: fileSizes,\n      duration: args.duration,\n      payment: args.payment,\n      userAddress: args.userAddress\n    }\n\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, payload)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {Buffer[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(quoteId: string, filePaths: string[]): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n      const formData = new FormData()\n      // Add each file to the form data\n      filePaths.forEach((path, index) => {\n        formData.append(`file${index + 1}`, fs.createReadStream(path))\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n\n      const response = await axios.post(uploadUrl, formData, {\n        headers: {\n          ...formData.getHeaders()\n        }\n      })\n\n      return response.data\n    } catch (error) {\n      console.error('Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  // async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n  //   const quote = await this.getQuote(args)\n  //   const uploadResponse = await this.upload(quote.quoteId, args.files)\n  //   return uploadResponse\n  // }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Date.now()\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n"],"names":["getSignedHash","signer","quoteId","nonce","hash","sha256","toUtf8Bytes","toString","Promise","resolve","signMessage","ethers","getBytes","e","reject","DBSClient","baseURL","this","validateBaseURL","_proto","prototype","trim","Error","validator","isURL","require_tld","getFileSizes","files","map","file","length","fs","statSync","size","getStorageInfo","axios","get","then","response","data","getQuote","args","filePath","fileInfo","fileSizes","post","type","duration","payment","userAddress","upload","filePaths","_this3","Math","round","Date","now","signature","formData","FormData","forEach","path","index","append","createReadStream","headers","_extends","getHeaders","_catch","error","console","getStatus","getLink","_this5","params","registerMicroservice"],"mappings":"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"}