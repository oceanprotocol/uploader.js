{"version":3,"file":"lib.js","sources":["../src/utils/index.ts","../src/DBSClient.ts"],"sourcesContent":["import { Signer, sha256, toUtf8Bytes } from 'ethers'\n\nexport const minErc20Abi = [\n  'function approve(address, uint256) external returns (bool)',\n  'function balanceOf(address owner) external view returns (uint256)'\n]\n\n/**\n * @param {string} quoteId - The quote ID.\n * @param {Signer} signer The signer object.\n * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n * @returns {Promise<string>} - A promise that resolves to the signed hash.\n */\nexport const getSignedHash = async (signer: Signer, quoteId: string, nonce: number) => {\n  // Concatenate the message\n  const message = sha256(toUtf8Bytes(quoteId + nonce.toString()))\n\n  // Sign the original message directly\n  const signature = await signer.signMessage(message)\n\n  return signature\n}\n","import { Signer, MaxInt256, Contract } from 'ethers'\nimport axios, { AxiosResponse } from 'axios'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs,\n  DBSGetQuoteArgs,\n  FileData\n} from './@types'\nimport { getSignedHash, minErc20Abi } from './utils'\nimport validator from 'validator'\nimport fs from 'fs'\nimport FormData from 'form-data'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nexport class DBSClient {\n  private baseURL: string\n  private signer: Signer\n  private dbsAddress: string\n\n  /**\n   * Creates an instance of the DBSClient.\n   * @param {string} baseURL - The base URL of the DBS API.\n   * @param {Signer} signer The signer object.\n   */\n  constructor(baseURL: string, address: string, signer?: Signer) {\n    this.validateBaseURL(baseURL)\n    this.baseURL = baseURL\n    this.signer = signer\n    this.dbsAddress = address\n  }\n\n  private validateBaseURL(baseURL: string): void {\n    if (!baseURL || typeof baseURL !== 'string' || baseURL.trim() === '') {\n      throw new Error('Invalid baseURL provided. baseURL cannot be empty or undefined.')\n    }\n\n    // Using the validator library to check for a valid URL.\n    // Including { require_tld: false } to allow 'localhost' as a valid URL.\n    if (!validator.isURL(baseURL, { require_tld: false })) {\n      throw new Error('Invalid baseURL format provided.')\n    }\n  }\n\n  private getFileSizes(files: string[]): FileData[] {\n    return files.map((file) => {\n      const stats = fs.statSync(file)\n      return {\n        length: stats.size\n      }\n    })\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    if (!args.filePath && !args.fileInfo) {\n      throw new Error('Either filePath or fileInfo must be provided.')\n    }\n    const fileSizes: FileData[] = args.fileInfo || this.getFileSizes(args.filePath)\n\n    const payload: DBSGetQuoteArgs = {\n      type: args.type,\n      files: fileSizes,\n      duration: args.duration,\n      payment: args.payment,\n      userAddress: args.userAddress\n    }\n\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, payload)\n\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {Buffer[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(\n    quoteId: string,\n    tokenAddress: string,\n    filePaths: string[],\n    type: string\n  ): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n\n      const token = new Contract(tokenAddress, minErc20Abi, this.signer)\n\n      // This needs to be updated to include other addresses once we have the deposit contract deployed on other networks\n      const approveAddress =\n        type === 'filecoin'\n          ? '0x0ff9092e55d9f6CCB0DD4C490754811bc0839866'\n          : this.dbsAddress\n\n      await (await token.approve(approveAddress, MaxInt256)).wait()\n\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n\n      const formData = new FormData()\n      // Add each file to the form data\n      filePaths.forEach((path, index) => {\n        formData.append(`file${index + 1}`, fs.createReadStream(path))\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n      console.log('uploadUrl', uploadUrl)\n\n      const response = await axios.post(uploadUrl, formData, {\n        headers: {\n          ...formData.getHeaders()\n        }\n      })\n\n      return response\n    } catch (error) {\n      console.error('Error:', error)\n      return error.data\n    }\n  }\n\n  async uploadBrowser(\n    quoteId: string,\n    tokenAddress: string,\n    files: FileList,\n    type: string\n  ): Promise<any> {\n    try {\n      const nonce = Math.round(Date.now() / 1000)\n\n      const token = new Contract(tokenAddress, minErc20Abi, this.signer)\n\n      // This needs to be updated to include other addresses once we have the deposit contract deployed on other networks\n      const approveAddress =\n        type === 'filecoin'\n          ? '0x0ff9092e55d9f6CCB0DD4C490754811bc0839866'\n          : this.dbsAddress\n\n      await token.approve(approveAddress, MaxInt256)\n      const signature = await getSignedHash(this.signer, quoteId, nonce)\n\n      const formData = new FormData()\n      // Add each file to the form data\n      Array.from(files).forEach((file, index) => {\n        formData.append(`file${index + 1}`, file, file.name)\n      })\n\n      const uploadUrl = `${this.baseURL}/upload?quoteId=${quoteId}&nonce=${nonce}&signature=${signature}`\n\n      const response = await axios.post(uploadUrl, formData)\n\n      return response\n    } catch (error) {\n      console.error('Error:', error)\n      return error.data\n    }\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage and uploads files according to the quote request.\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>}\n   */\n  // async getQuoteAndUpload(args: GetQuoteArgs): Promise<any> {\n  //   const quote = await this.getQuote(args)\n  //   const uploadResponse = await this.upload(quote.quoteId, args.files)\n  //   return uploadResponse\n  // }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.get<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      params: {\n        quoteId\n      }\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(quoteId: string): Promise<GetLinkResult[]> {\n    const nonce = Math.round(Date.now() / 1000)\n    const signature = await getSignedHash(this.signer, quoteId, nonce)\n    const response = await axios.get<GetLinkResult[]>(`${this.baseURL}/getLink`, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<AxiosResponse> {\n    const response = await axios.post(`${this.baseURL}/register`, args)\n    return response\n  }\n\n  /**\n   * Retrieves the quote history for the given user address, nonce, and signature.\n   *\n   * @returns {Promise<any>} A promise that resolves to the quote history data.\n   */\n  async getHistory(\n    page: number = 1,\n    pageSize: number = 25,\n    storageType: string\n  ): Promise<any> {\n    try {\n      const userAddress = await this.signer.getAddress()\n      const nonce = Math.round(Date.now() / 1000)\n      const signature = await getSignedHash(this.signer, '', nonce)\n\n      // Construct the URL with the query parameters\n      const url = `${this.baseURL}/getHistory?userAddress=${userAddress}&nonce=${nonce}&signature=${signature}&page=${page}&pageSize=${pageSize}&storage=${storageType}`\n\n      // Send a GET request\n      const response: AxiosResponse = await axios.get(url)\n\n      // Validate the response status code\n      if (response.status !== 200) {\n        throw new Error('Failed to retrieve history.')\n      }\n\n      return response.data\n    } catch (error) {\n      console.error('An error occurred while fetching history:', error)\n      throw error\n    }\n  }\n}\n"],"names":["minErc20Abi","getSignedHash","signer","quoteId","nonce","message","sha256","toUtf8Bytes","toString","Promise","resolve","signMessage","e","reject","DBSClient","baseURL","address","this","dbsAddress","validateBaseURL","_proto","prototype","trim","Error","validator","isURL","require_tld","getFileSizes","files","map","file","length","fs","statSync","size","getStorageInfo","axios","get","then","response","data","getQuote","args","filePath","fileInfo","fileSizes","post","payload","type","duration","payment","userAddress","upload","tokenAddress","filePaths","_this3","_catch","Math","round","Date","now","token","Contract","approve","MaxInt256","_token$approve","wait","signature","formData","FormData","forEach","path","index","append","createReadStream","uploadUrl","console","log","headers","_extends","getHeaders","error","uploadBrowser","_this4","Array","from","name","getStatus","params","getLink","_this6","registerMicroservice","getHistory","page","pageSize","storageType","_this8","getAddress","status"],"mappings":"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"}